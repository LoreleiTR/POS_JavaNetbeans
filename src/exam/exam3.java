/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package exam;

import java.sql.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import java.sql.ResultSet;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

// *
// * @author Lorelei
// */
public class exam3 extends javax.swing.JFrame {

    
    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    /**
     * Creates new form exam3
     */
    
          
    public exam3() {
        Itemcode=1;
        initComponents();
        
        Connect();
        table_update();
    }
    
    private void table_update(){
        

        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/examination","root","");
            pst = con.prepareStatement("SELECT * FROM stocks");
            ResultSet stcRs = pst.executeQuery();
            
            
            ResultSetMetaData stcRSMD = stcRs.getMetaData();
            int stcCC = stcRSMD.getColumnCount();
            DefaultTableModel stcDFT = (DefaultTableModel) stocktable.getModel();
            stcDFT.setRowCount(0);
            
            while (stcRs.next()){
                Vector stcV2 = new Vector();
                
                for(int ii = 1; ii <= stcCC; ii++){
                    stcV2.add(stcRs.getString("ID"));
                    stcV2.add(stcRs.getString("Item"));
                    stcV2.add(stcRs.getString("Prices"));
                    stcV2.add(stcRs.getString("Quantity"));
                }
                stcDFT.addRow(stcV2);
                
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(exam3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
private int Itemcode;
    String Item;
    int amount, price;
        public static Connection Connect(){
    Connection con = null;
    
    try {

        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/examination","root","");
    } catch (SQLException ex) {
        Logger.getLogger(exam2.class.getName()).log(Level.SEVERE, null, ex);
        System.out.println("Error connecting to database: " + ex.getMessage());
    }
    return con;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btn = new javax.swing.JButton();
        addbtn = new javax.swing.JButton();
        usercode = new javax.swing.JLabel();
        amounttxt = new javax.swing.JTextField();
        pricetxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        stocktable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("INSERT STOCK OF PRODUCTS ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 330, -1));

        jLabel2.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        jLabel2.setText("AMOUNT");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, -1, -1));

        jLabel3.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        jLabel3.setText("PRICE");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 190, 80, -1));

        btn.setText("HOME PAGE");
        btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });
        getContentPane().add(btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 380, -1, -1));

        addbtn.setText("ADD");
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });
        getContentPane().add(addbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 280, 75, -1));

        usercode.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        usercode.setText(Item);
        usercode.setText("Board Slide");
        getContentPane().add(usercode, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 326, -1));
        getContentPane().add(amounttxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 71, -1));
        getContentPane().add(pricetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(149, 207, 71, -1));

        stocktable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "ITEM", "PRICES", "QUANTITY"
            }
        ));
        jScrollPane1.setViewportView(stocktable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, 414, 411));

        jButton1.setText("CLEAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 320, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exam/1C.jpg"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 830, 450));

        setSize(new java.awt.Dimension(846, 458));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed
        
        try {                                       
            // TODO add your handling code here:
                        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/examination","root","");
            String amountinput= amounttxt.getText();
            String priceinput = pricetxt.getText();
            amounttxt.setText("");
            pricetxt.setText("");
            try {
                amount = Integer.parseInt(amountinput);
                price = Integer.parseInt(priceinput);
                
                
                // Check if the item already exists in the database
                String selectSql = "SELECT * FROM stocks WHERE ID = ?";
                PreparedStatement selectStatement = con.prepareStatement(selectSql);
                selectStatement.setInt(1, Itemcode);
                ResultSet resultSet = selectStatement.executeQuery();

                if (resultSet.next()) {
                    // Item already exists, perform the update
                    String updateSql = "UPDATE stocks SET Prices = ?, Quantity = ? WHERE ID = ?";
                    PreparedStatement updateStatement = con.prepareStatement(updateSql);
                    updateStatement.setInt(1, price);
                    updateStatement.setInt(2, amount);
                    updateStatement.setInt(3, Itemcode);
                    updateStatement.executeUpdate();
                    
                    
                } else {
                    String insertSql = "INSERT INTO stocks (ID, Item, Prices, Quantity) VALUES (?, ?, ?, ?)";
                    PreparedStatement preparedStatement = con.prepareStatement(insertSql);
                    preparedStatement.setString(1, Integer.toString(Itemcode));
                    preparedStatement.setString(2, usercode.getText());
                    preparedStatement.setInt(3, price);
                    preparedStatement.setInt(4, amount);
                    preparedStatement.executeUpdate();
                }
                Itemcode = Itemcode + 1;
                
                
                if (Itemcode == 2){
                    usercode.setText("Baracha");
                } else if (Itemcode == 3){
                    usercode.setText("Keto");
                } else if (Itemcode == 4){
                    usercode.setText("Fakie Sandwich");
                } else if (Itemcode == 5){
                    usercode.setText("Chick & Burger");
                } else if (Itemcode == 6){
                    usercode.setText("Chicken Sandwich");
                } else if (Itemcode == 7){
                    usercode.setText("Bacon & Egg");
                } else if (Itemcode == 8){
                    usercode.setText("Ham & Egg");
                } else if (Itemcode == 9){
                    usercode.setText("Spam & Egg");
                } else if (Itemcode == 10){
                    usercode.setText("Bacon");
                } else if (Itemcode == 11){
                    usercode.setText("Cheese");
                } else if (Itemcode == 12){
                    usercode.setText("Egg");
                } else if (Itemcode == 13){
                    usercode.setText("Ham");
                } else if (Itemcode == 14){
                    usercode.setText("Spam");
                } else if (Itemcode == 15){
                    usercode.setText("BBQ Sauce");
                } else if (Itemcode == 16){
                    usercode.setText("First Fries");
                } else if (Itemcode == 17){
                    usercode.setText("Grand Fries");
                } else if (Itemcode == 18){
                    usercode.setText("Setup Complete");
                    amounttxt.setEnabled(false);
                    pricetxt.setEnabled(false);
                    resbtn.setEnabled(true);
                }
                
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Please enter valid integers for the amount and price.");
            } catch (SQLException ex) {
                Logger.getLogger(exam3.class.getName()).log(Level.SEVERE, null, ex);
            }        // TODO add your handling code here:
            
        } catch (SQLException ex) {
                Logger.getLogger(exam3.class.getName()).log(Level.SEVERE,null, ex);
            }        // TODO add your handling code here:
    table_update();
    }//GEN-LAST:event_addbtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Itemcode = 0;
        usercode.setText("Board Slide");
        amount = 0;
        price = 0;
        while (Itemcode < 18){
            String selectSql = "SELECT * FROM stocks WHERE ID = ?";
            PreparedStatement selectStatement = null;
            try {
                selectStatement = con.prepareStatement(selectSql);
            } catch (SQLException ex) {
                Logger.getLogger(exam3.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                selectStatement.setInt(1, Itemcode);
            } catch (SQLException ex) {
                Logger.getLogger(exam3.class.getName()).log(Level.SEVERE, null, ex);
            }
            ResultSet resultSet = null;
            try {
                resultSet = selectStatement.executeQuery();
            } catch (SQLException ex) {
                Logger.getLogger(exam3.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                if (resultSet.next()) {
                    // Item already exists, perform the update
                    String updateSql = "UPDATE stocks SET Prices = ?, Quantity = ? WHERE ID = ?";
                    PreparedStatement updateStatement = con.prepareStatement(updateSql);
                    updateStatement.setInt(1, price);
                    updateStatement.setInt(2, amount);
                    updateStatement.setInt(3, Itemcode);
                    updateStatement.executeUpdate();
                    
                    
                }
            } catch (SQLException ex) {
                Logger.getLogger(exam3.class.getName()).log(Level.SEVERE, null, ex);
            }
                
                Itemcode = Itemcode + 1;
                
                
                if (Itemcode == 2){
                    usercode.setText("Baracha");
                } else if (Itemcode == 3){
                    usercode.setText("Keto");
                } else if (Itemcode == 4){
                    usercode.setText("Fakie Sandwich");
                } else if (Itemcode == 5){
                    usercode.setText("Chick & Burger");
                } else if (Itemcode == 6){
                    usercode.setText("Chicken Sandwich");
                } else if (Itemcode == 7){
                    usercode.setText("Bacon & Egg");
                } else if (Itemcode == 8){
                    usercode.setText("Ham & Egg");
                } else if (Itemcode == 9){
                    usercode.setText("Spam & Egg");
                } else if (Itemcode == 10){
                    usercode.setText("Bacon");
                } else if (Itemcode == 11){
                    usercode.setText("Cheese");
                } else if (Itemcode == 12){
                    usercode.setText("Egg");
                } else if (Itemcode == 13){
                    usercode.setText("Ham");
                } else if (Itemcode == 14){
                    usercode.setText("Spam");
                } else if (Itemcode == 15){
                    usercode.setText("BBQ Sauce");
                } else if (Itemcode == 16){
                    usercode.setText("First Fries");
                } else if (Itemcode == 17){
                    usercode.setText("Grand Fries");
                } else if (Itemcode == 18){
                    usercode.setText("Setup Complete");
                    amounttxt.setEnabled(false);
                    pricetxt.setEnabled(false);
                    btn.setEnabled(true);
                }
                
           
        }
        table_update();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActionPerformed
        // TODO add your handling code here:
        exam1 w5= new exam1();
        w5.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(exam3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(exam3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(exam3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(exam3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new exam3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbtn;
    private javax.swing.JTextField amounttxt;
    private javax.swing.JButton btn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField pricetxt;
    private javax.swing.JTable stocktable;
    private javax.swing.JLabel usercode;
    // End of variables declaration//GEN-END:variables
}
