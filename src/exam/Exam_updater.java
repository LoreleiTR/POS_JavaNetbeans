/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Interface.java to edit this template
 */
package exam;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import java.sql.ResultSet;


/**
 *
 * @author Shian JK
 */
public class Exam_updater extends javax.swing.JFrame {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/examination";
    private static final String DB_USERNAME = "root";
    private static final String DB_PASSWORD = "";

    // Define a connection object
    private Connection connection;

    // Establish the database connection
    public void connectToDatabase() {
        try {
            connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD);
            System.out.println("Connected to the database.");
        } catch (SQLException e) {
            System.out.println("Failed to connect to the database.");
            e.printStackTrace();
        }
        
    }
    private int Itemcode;
    String Item;
    /**
     * Creates new form Exam_updater
     */
    public Exam_updater() {
        Itemcode = 1;
        connectToDatabase();
        initComponents();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Itemname = new javax.swing.JLabel();
        Amount = new javax.swing.JTextField();
        Price = new javax.swing.JTextField();
        Add = new javax.swing.JButton();
        Next = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("UNI.co Admin panel");

        Itemname.setText(Item);
        Itemname.setText("Board Slide");

        ((AbstractDocument) Amount.getDocument()).setDocumentFilter(new NumericDocumentFilter());

        ((AbstractDocument) Price.getDocument()).setDocumentFilter(new NumericDocumentFilter());

        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Next.setText("Next");
        Next.setEnabled(false);
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        jLabel4.setText("Amount");

        jLabel5.setText("Price");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                            .addComponent(Itemname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Amount, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Price, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(Next, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(7, 7, 7)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Itemname)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Next)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {                                    
        String amountInput = Amount.getText();
        String priceInput = Price.getText();
        Amount.setText("");
        Price.setText("");
        try {
                int amount = Integer.parseInt(amountInput);
                int price = Integer.parseInt(priceInput);
                
                
                // Check if the item already exists in the database
                String selectSql = "SELECT * FROM items WHERE id = ?";
                PreparedStatement selectStatement = connection.prepareStatement(selectSql);
                selectStatement.setInt(1, Itemcode);
                ResultSet resultSet = selectStatement.executeQuery();

                if (resultSet.next()) {
                    // Item already exists, perform the update
                    String updateSql = "UPDATE items SET price = ?, amount = ? WHERE id = ?";
                    PreparedStatement updateStatement = connection.prepareStatement(updateSql);
                    updateStatement.setInt(1, price);
                    updateStatement.setInt(2, amount);
                    updateStatement.setInt(3, Itemcode);
                    updateStatement.executeUpdate();

                    
                } else {
                    String insertSql = "INSERT INTO items (id, name, price, amount) VALUES (?, ?, ?, ?)";
                    PreparedStatement preparedStatement = connection.prepareStatement(insertSql);
                    preparedStatement.setString(1, Integer.toString(Itemcode));
                    preparedStatement.setString(2, Itemname.getText());
                    preparedStatement.setInt(3, price);
                    preparedStatement.setInt(4, amount);
                    preparedStatement.executeUpdate();
                }
                Itemcode = Itemcode + 1;
                
                
                if (Itemcode == 2){
                    Itemname.setText("Baracha");
                } else if (Itemcode == 3){
                    Itemname.setText("Keto");
                } else if (Itemcode == 4){
                    Itemname.setText("Fakie Sandwich");
                } else if (Itemcode == 5){
                    Itemname.setText("Chick & Burger");
                } else if (Itemcode == 6){
                    Itemname.setText("Chicken Sandwich");
                } else if (Itemcode == 7){
                    Itemname.setText("Bacon & Egg");
                } else if (Itemcode == 8){
                    Itemname.setText("Ham & Egg");
                } else if (Itemcode == 9){
                    Itemname.setText("Spam & Egg");
                } else if (Itemcode == 10){
                    Itemname.setText("Bacon");
                } else if (Itemcode == 11){
                    Itemname.setText("Cheese");
                } else if (Itemcode == 12){
                    Itemname.setText("Egg");
                } else if (Itemcode == 13){
                    Itemname.setText("Ham");
                } else if (Itemcode == 14){
                    Itemname.setText("Spam");
                } else if (Itemcode == 15){
                    Itemname.setText("BBQ Sauce");
                } else if (Itemcode == 16){
                    Itemname.setText("First Fries");
                } else if (Itemcode == 17){
                    Itemname.setText("Grand Fries");
                } else if (Itemcode == 18){
                    Itemname.setText("Setup Complete");
                    Amount.setEnabled(false);
                    Price.setEnabled(false);
                    Next.setEnabled(true);
                }
                
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Please enter valid integers for the amount and price.");
            } catch (SQLException ex) {
            Logger.getLogger(Exam_updater.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:
    }                                   

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
    }                                    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Exam_updater.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Exam_updater.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Exam_updater.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Exam_updater.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Exam_updater().setVisible(true);
            }
        });
    }
    static class NumericDocumentFilter extends DocumentFilter {
        @Override
        public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr)
                throws BadLocationException {
            // Allow only numeric characters
            if (string.matches("\\d+")) {
                super.insertString(fb, offset, string, attr);
            }
        }

        @Override
        public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
        if (text.matches("\\d+")) {
            super.replace(fb, offset, length, text, attrs);
        } else {
            fb.getDocument().remove(offset, length);
            fb.insertString(offset, "", attrs); // Set the text to empty
        }
    }
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton Add;
    private javax.swing.JTextField Amount;
    private javax.swing.JLabel Itemname;
    private javax.swing.JButton Next;
    private javax.swing.JTextField Price;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration                   
}